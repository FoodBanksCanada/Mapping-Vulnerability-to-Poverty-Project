// create empty variables to manipulate feature state
var hovered_fed_id = null;
var hovered_ada_id = null;
var clicked_fed_id = null;
var clicked_ada_id = null;

var current_geo = null;
var province_within = null;

var food_bank_popup;
var food_basket_popup;

// function to format population and income values with commas
var formatNumber = function (num) {
    return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')
};

// about section before bars
var about_type = document.getElementById("clicked_about_type");
var about_name = document.getElementById("clicked_about_name");
var about_census = document.getElementById("clicked_about_census_type");
var about_census_name = document.getElementById("clicked_about_census_name");
var selected_geography = document.getElementById("info_value_geography");
var about_population = document.getElementById("info_value_population");
var about_med_income = document.getElementById("info_value_med_inc");

var draw_provter = function (PRUID) {
    for (var i = 0; i < provter_obj.length; i++) {
        var provter_PRUID = [provter_obj[i].PRUID];
        var balance = provter_PRUID - PRUID; // not same data type so can't equate directly, hence subtracting to determine 0 as a match

        if (balance == 0) {
            var provter_name = [provter_obj[i].PRENAME];
            var provter_population = [provter_obj[i].population];
            var provter_recent_immigration = [provter_obj[i].recent_immigration];
            var provter_med_inc = [provter_obj[i].median_income_house];
            var provter_lim_at = [provter_obj[i].lim_at];
            var provter_visible_minority = [provter_obj[i].visible_minority];
            var provter_unemployment = [provter_obj[i].unemployment];
            var provter_aboriginal_identity = [provter_obj[i].aboriginal_identity];
            var provter_child_poverty = [provter_obj[i].child_poverty_2017];
            var provter_tenant30 = [provter_obj[i].tenant30];

            var provter_bar_array = [
                provter_recent_immigration,
                provter_lim_at,
                provter_visible_minority,
                provter_unemployment,
                provter_aboriginal_identity,
                provter_child_poverty,
                provter_tenant30
            ];

            return provter_bar_array;
        };
    };
};


var about_provter = function (PRUID) {
    for (var i = 0; i < provter_obj.length; i++) {
        var provter_PRUID = [provter_obj[i].PRUID];
        var balance = provter_PRUID - PRUID; // not same data type so can't equate directly, hence subtracting to determine 0 as a match

        if (balance == 0) {
            var provter_name = provter_obj[i].PRENAME;
            var provter_population = provter_obj[i].population;
            var provter_med_inc = provter_obj[i].median_income_house;

            var provter_about_name = document.getElementById("provter_value_geography");
            var provter_about_population = document.getElementById("provter_value_population");
            var provter_about_med_income = document.getElementById("provter_value_med_inc");

            var format_provter_med_inc = formatNumber(provter_med_inc);
            var format_provter_population = formatNumber(provter_population);

            provter_about_name.innerHTML = provter_name;

            provter_about_population.innerHTML = format_provter_population;

            provter_about_med_income.innerHTML = "$" + format_provter_med_inc;
        };
    };
};


//----------------------------------------------------------------------
// hovering begins
//----------------------------------------------------------------------
// When the user moves their mouse over the fed-fill layer, will update the
// feature state for the feature under the mouse

var fed_hover_move = function (e) {
    if (e.features.length > 0) {
        if (hovered_fed_id) {
            map.setFeatureState({ source: 'fed_hover', sourceLayer: 'FED_2016', id: hovered_fed_id }, { hover: false });
        };
        hovered_fed_id = e.features[0].id;
        map.setFeatureState({ source: 'fed_hover', sourceLayer: 'FED_2016', id: hovered_fed_id }, { hover: true });
    };
};

// same for ada
var ada_hover_move = function (e) {
    if (e.features.length > 0) {
        if (hovered_ada_id) {
            map.setFeatureState({ source: 'ada_hover', sourceLayer: 'ADA_2016', id: hovered_ada_id }, { hover: false });
        };
        hovered_ada_id = e.features[0].id;
        map.setFeatureState({ source: 'ada_hover', sourceLayer: 'ADA_2016', id: hovered_ada_id }, { hover: true });
    };
};

// When the mouse leaves the fed-fill layer, update the feature state of the
// previously hovered feature.
var fed_hover_leave = function () {
    if (hovered_fed_id) {
        map.setFeatureState({ source: 'fed_hover', sourceLayer: 'FED_2016', id: hovered_fed_id }, { hover: false });
    };
    hovered_fed_id = null;
};

// same for ada
var ada_hover_leave = function () {
    if (hovered_ada_id) {
        map.setFeatureState({ source: 'ada_hover', sourceLayer: 'ADA_2016', id: hovered_ada_id }, { hover: false });
    };
    hovered_ada_id = null;
};
//----------------------------------------------------------------------
// hovering ends
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Populate info window function begins
//----------------------------------------------------------------------
var fed_info_populate = function(fed_clicked) {
    // place all attributes/properties in variables for use

    var FEDUID = [fed_clicked[0].properties.FEDUID];
    var name = [fed_clicked[0].properties.FEDENAME];
    var PRUID = [fed_clicked[0].properties.PRUID];
    var population = [fed_clicked[0].properties.population];
    var recent_immigration = [fed_clicked[0].properties.recent_immigration];
    var med_inc =[fed_clicked[0].properties.median_income_house];
    var lim_at = [fed_clicked[0].properties.lim_at];
    var visible_minority = [fed_clicked[0].properties.visible_minority];
    var unemployment = [fed_clicked[0].properties.unemployment];
    var aboriginal_identity = [fed_clicked[0].properties.aboriginal_identity];
    var child_poverty = [fed_clicked[0].properties.child_poverty_2017];
    var tenant30 = [fed_clicked[0].properties.tenant30];

    var provter_bar_array = draw_provter(PRUID);

    //----------------------------------------------------------------------
    // d3 bars
    //----------------------------------------------------------------------
    
    // all data bin stops for colour classification to match map; must match stops defined in layers.js where layers are added to map; specific to FED and ADA layers
    // colour range 11
    var stops_recent_immigration = [
        0,
        0.5,
        0.75,
        1.5,
        2.5,
        3.5,
        5,
        7,
        10,
        12,
        20
    ];

    // colour range 11
    var stops_visible_minority = [
        0,
        1,
        2.5,
        5,
        7.5,
        12.5,
        20,
        25,
        35,
        50,
        75
    ];

    // colour range 10
    var stops_aboriginal_identity = [
        0,
        0.5,
        1,
        2,
        5,
        10,
        20,
        50,
        65,
        75
    ];

    //colour range 10
    var stops_lim_at = [
        0,
        2.5,
        5,
        7.5,
        10,
        12.5,
        15,
        20,
        25,
        50
    ];

    // colour range 10
    var stops_child_poverty = [
        0,
        2.5,
        5,
        7.5,
        10,
        12.5,
        15,
        20,
        25,
        50
    ];

    // colour range 10
    var stops_unemployment = [
        0,
        4,
        5,
        6,
        7,
        8,
        10,
        15,
        20,
        30
    ];

    // colour range 10
    var stops_tenant30 = [
        0,
        10,
        25,
        30,
        35,
        38,
        42,
        45,
        50,
        75
    ];

    var bar_array = [
        recent_immigration,
        lim_at,
        visible_minority,
        unemployment,
        aboriginal_identity,
        child_poverty,
        tenant30
    ];

    adjust_bars(bar_array, stops_recent_immigration, stops_visible_minority, stops_aboriginal_identity, stops_lim_at, stops_child_poverty, stops_unemployment, stops_tenant30);

    provter_adjust_bars(provter_bar_array, stops_recent_immigration, stops_visible_minority, stops_aboriginal_identity, stops_lim_at, stops_child_poverty, stops_unemployment, stops_tenant30);
    

    //----------------------------------------------------------------------
    // d3 bars
    //----------------------------------------------------------------------


    // populate about section before bars
    var format_med_inc = formatNumber(med_inc);
    var format_population = formatNumber(population);

    about_type.innerHTML = "Federal Electoral District (riding):"
    about_name.innerHTML = "<a class='statscan_link' target='_blank' href='https://www12.statcan.gc.ca/census-recensement/2016/dp-pd/prof/search-recherche/results-resultats.cfm?Lang=E&TABID=3&G=1&Geo1=&Code1=&Geo2=&Code2=&SearchText=" + FEDUID + "&wb-srch-geocode=search'>" + name + "</a>";

    about_census.classList.add("hidden");
    about_census_name.classList.add("hidden");

    selected_geography.innerHTML = "FED";

    about_population.innerHTML = format_population;

    about_med_income.innerHTML = "$" + format_med_inc;

    about_provter(PRUID);

};

var ada_info_populate = function (ada_clicked) {
    // place all attributes/properties in variables for use
    var ADAUID = [ada_clicked[0].properties.ADAUID];
    var census = [ada_clicked[0].properties.CDNAME];
    var PRUID = [ada_clicked[0].properties.PRUID];
    var population = [ada_clicked[0].properties.population];
    var recent_immigration = [ada_clicked[0].properties.recent_immigration];
    var med_inc = [ada_clicked[0].properties.median_income_house];
    var lim_at = [ada_clicked[0].properties.lim_at];
    var visible_minority = [ada_clicked[0].properties.visible_minority];
    var unemployment = [ada_clicked[0].properties.unemployment];
    var aboriginal_identity = [ada_clicked[0].properties.aboriginal_identity];
    var child_poverty = "";
    var tenant30 = [ada_clicked[0].properties.tenant30];

    var provter_bar_array = draw_provter(PRUID);

    //----------------------------------------------------------------------
    // d3 bars
    //----------------------------------------------------------------------

    // all data bin stops for colour classification to match map; must match stops defined in layers.js where layers are added to map; specific to FED and ADA layers
    // colour range 11
    var stops_recent_immigration = [
        0,
        0,
        0.25,
        0.5,
        1,
        2.5,
        5,
        7.5,
        10,
        15,
        25
    ];

    // colour range 11
    var stops_visible_minority = [
        0,
        1,
        2.5,
        5,
        7.5,
        12.5,
        20,
        25,
        35,
        50,
        75
    ];

    // colour range 10
    var stops_aboriginal_identity = [
        0,
        0.5,
        1,
        2.5,
        5,
        10,
        25,
        50,
        75,
        95
    ];

    //colour range 10
    var stops_lim_at = [
        0,
        2.5,
        5,
        7.5,
        10,
        12.5,
        15,
        20,
        25,
        50
    ];

    // colour range 10
    var stops_child_poverty = [
        0,
        2.5,
        5,
        7.5,
        10,
        12.5,
        15,
        20,
        25,
        50
    ];

    // colour range 10
    var stops_unemployment = [
        0,
        4,
        5,
        6,
        7,
        8,
        10,
        15,
        20,
        30
    ];

    // colour range 10
    var stops_tenant30 = [
        0,
        10,
        25,
        30,
        35,
        38,
        42,
        45,
        50,
        75
    ];

    var bar_array = [
        recent_immigration,
        lim_at,
        visible_minority,
        unemployment,
        aboriginal_identity,
        child_poverty,
        tenant30
    ];

    adjust_bars(bar_array, stops_recent_immigration, stops_visible_minority, stops_aboriginal_identity, stops_lim_at, stops_child_poverty, stops_unemployment, stops_tenant30);

    provter_adjust_bars(provter_bar_array, stops_recent_immigration, stops_visible_minority, stops_aboriginal_identity, stops_lim_at, stops_child_poverty, stops_unemployment, stops_tenant30);

    //----------------------------------------------------------------------
    // d3 bars
    //----------------------------------------------------------------------

    // populate about section before bars

    var format_med_inc = formatNumber(med_inc);
    var format_population = formatNumber(population);

    about_type.innerHTML = "Aggregate Dissemination Area:";
    about_name.innerHTML = "<a class='statscan_link' target='_blank' href='https://www12.statcan.gc.ca/census-recensement/2016/dp-pd/prof/search-recherche/results-resultats.cfm?Lang=E&TABID=3&G=1&Geo1=&Code1=&Geo2=&Code2=&SearchText=" + ADAUID + "&wb-srch-geocode=search'>" + ADAUID + "</a>";

    about_census.classList.remove("hidden");
    about_census_name.classList.remove("hidden");

    about_census_name.innerHTML = census;

    selected_geography.innerHTML = "ADA";

    about_population.innerHTML = format_population;

    about_med_income.innerHTML = "$" + format_med_inc;

    about_provter(PRUID);

};
//----------------------------------------------------------------------
// Populate info window function ends
//----------------------------------------------------------------------
//----------------------------------------------------------------------
// click function small functions definitions begin
//----------------------------------------------------------------------
var fed_click_inner = function (fed_clicked_inner) {
    // set any existing borders to false click feature state so no two polygons are highlighted at once
    if (clicked_fed_id) {
        map.setFeatureState({ source: 'fed_click', sourceLayer: 'FED_2016', id: clicked_fed_id }, { click: false });
    };

    if (clicked_ada_id) {
        map.setFeatureState({ source: 'ada_click', sourceLayer: 'ADA_2016', id: clicked_ada_id }, { click: false });
    };

    clicked_fed_id = fed_clicked_inner[0].id;
    map.setFeatureState({ source: 'fed_click', sourceLayer: 'FED_2016', id: clicked_fed_id }, { click: true });

    // call function to populate info window
    fed_info_populate(fed_clicked_inner);
};

var fed_click = function (e) {
    // query which fed has been clicked
    var fed_clicked = map.queryRenderedFeatures(e.point, {
        layers: ['fed_click_fill']
    });

    // highlight clicked border by changing feature state, make any previously highlighted borders not highlighted
    if (fed_clicked.length > 0) {
        fed_click_inner(fed_clicked);
    };
};

var ada_click_inner = function (ada_clicked_inner) {
    // set any existing borders to false click feature state so no two polygons are highlighted at once
    if (clicked_fed_id) {
        map.setFeatureState({ source: 'fed_click', sourceLayer: 'FED_2016', id: clicked_fed_id }, { click: false });
    };

    if (clicked_ada_id) {
        map.setFeatureState({ source: 'ada_click', sourceLayer: 'ADA_2016', id: clicked_ada_id }, { click: false });
    };
    clicked_ada_id = ada_clicked_inner[0].id;
    map.setFeatureState({ source: 'ada_click', sourceLayer: 'ADA_2016', id: clicked_ada_id }, { click: true });

    ada_info_populate(ada_clicked_inner);
};

var ada_click = function (e) {
    // query which fed has been clicked
    var ada_clicked = map.queryRenderedFeatures(e.point, {
        layers: ['ada_click_fill']
    });

    // highlight clicked border by changing feature state, make any previously highlighted borders not highlighted
    if (ada_clicked.length > 0) {
        ada_click_inner(ada_clicked)
    };
};

// food basket layer is clicked
var food_basket_click = function(food_basket_features, e) {
    var basket = food_basket_features[0];
    var coordinates = basket.geometry.coordinates.slice();
    var community = basket.properties.community;
    var march_18 = basket.properties.march_18;
    var monthly_cost = march_18 * 4;

    // Ensure that if the map is zoomed out such that multiple
    // copies of the feature are visible, the popup appears
    // over the copy being pointed to.
    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
    };

    march_18 = formatNumber(march_18);
    monthly_cost = formatNumber(monthly_cost);

    var popup_content = "<p class='popup_content'><strong class='popup_title'>" + community + "</strong><br>Weekly cost of a <a class='gen_links' target='_blank' href='https://www.nutritionnorthcanada.gc.ca/eng/1548078467819/1548078497301'>nutritious food basket</a> in March of 2018: <strong class='popup_values'>$" + march_18 + "</strong><br>Monthly cost to feed a family of four: <strong class='popup_values'>$" + monthly_cost + "</strong><br><a class='gen_links' target='_blank' href='https://www.ottawapublichealth.ca/en/public-health-topics/resources/Documents/2018_NFB-Report_EN.pdf'>Ottawa's</a> monthly cost to feed a family of four: <strong class='popup_values'>$868</strong></p>";

    food_basket_popup = new mapboxgl.Popup();
    food_basket_popup
        .setLngLat(coordinates)
        .setHTML(popup_content)
        .addTo(map);
};

// food bank cluster layer is clicked
var food_bank_cluster_click = function (food_bank_cluster_features, e) {
    var clusterId = food_bank_cluster_features[0].properties.cluster_id;
    map.getSource('food_bank').getClusterExpansionZoom(clusterId, function (err, zoom) {
        if (err)
            return;

        map.easeTo({
            center: food_bank_cluster_features[0].geometry.coordinates,
            zoom: zoom
        });
    });
    
};

// food bank point layer is clicked
var food_bank_click = function (food_bank_features, e) {
    var bank = food_bank_features[0];
    var coordinates = bank.geometry.coordinates.slice();
    var name = bank.properties.name;
    var phone = bank.properties.phone;
    var city = bank.properties.city;
    var province = bank.properties.province;

    // Ensure that if the map is zoomed out such that multiple
    // copies of the feature are visible, the popup appears
    // over the copy being pointed to.
    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
    };

    if (city == "null") { // has no city
        var popup_content = "<p class='popup_content'><strong class='popup_title'>" + name + "</strong><br>" + province + "</p>";
    } else { // has city
        var popup_content = "<p class='popup_content'><strong class='popup_title'>" + name + "</strong><br>" + city + ", " + province + "</p>";
    };

    food_bank_popup = new mapboxgl.Popup();
    food_bank_popup
        .setLngLat(coordinates)
        .setHTML(popup_content)
        .addTo(map);  
    
};
//----------------------------------------------------------------------
// click function small functions definitions end
//----------------------------------------------------------------------
//----------------------------------------------------------------------
// is called when the map is clicked, references funcitons above
//----------------------------------------------------------------------
var map_click = function (e) {
    // if a search point is on the map hide it
    // check if clicked food basket and bank cluster & point layers
    var food_basket_features = map.queryRenderedFeatures(e.point, { layers: ['food_basket'] });

    var food_bank_cluster_features = map.queryRenderedFeatures(e.point, { layers: ['food_bank_cluster'] });

    var food_bank_features = map.queryRenderedFeatures(e.point, { layers: ['food_bank_unclustered_point'] });


    if (food_basket_features.length > 0) {
        food_basket_click(food_basket_features, e);
        
    // only if food basket point layer not clicked check food bank clusters
    } else if (food_bank_cluster_features.length > 0) {
        food_bank_cluster_click(food_bank_cluster_features, e);

    // only if food bank cluster layer not clicked check food bank points
    } else if (food_bank_features.length > 0) {
        food_bank_click(food_bank_features, e);

    // when no point layers have been clicked find out which polygon was clicked
    } else {
        // check which geography should be selecting contents of drop down menu that indicates geo selection
        // geo_selection defined in change_events_geography.js; identifies current geography selection
        current_geo = geo_selection;
        // based on if it is set to auto, fed, or ada determine data to select and funciton to call
        if (current_geo === "auto") {
            // because is auto must determine geography to query based on zoom level
            var zoom_current = map.getZoom();
            // if map is zoomed into 10 or greater ada is appropriate geography to select
            if (zoom_current >= 10) {
                ada_click(e);
                // if map is zoomed in less than 10 fed is appropriate geography to select
            } else if (zoom_current < 10) {
                fed_click(e);
            }
        } else if (current_geo === "fed") {
            // know user will be selecting an fed polygon to query information
            // call aprropriate function
            fed_click(e);

        } else if (current_geo === "ada") {
            // know user will be selecting an ada polygon to query information
            // call corresponding funciton
            ada_click(e);
        };
    };
    
};

var geocoder_searched = function(ada_searched, fed_searched) {
    // check which geography should be selecting contents of drop down menu that indicates geo selection
    // geo_selection defined in change_events_geography.js; identifies current geography selection
    current_geo = geo_selection;
    // based on if it is set to auto, fed, or ada determine data to select and funciton to call
    if (current_geo === "auto") {
        // because is auto must determine geography to query based on zoom level
        var zoom_current = map.getZoom();
        // if map is zoomed into 10 or greater ada is appropriate geography to select
        if (zoom_current >= 10) {
            ada_click_inner(ada_searched);
            // if map is zoomed in less than 10 fed is appropriate geography to select
        } else if (zoom_current < 10) {
            fed_click_inner(fed_searched);
        }
    } else if (current_geo === "fed") {
        // know user will be selecting an fed polygon to query information
        // call aprropriate function
        fed_click_inner(fed_searched);

    } else if (current_geo === "ada") {
        // know user will be selecting an ada polygon to query information
        // call corresponding funciton
        ada_click_inner(ada_searched);
    };
};
