var provter_bar_array = [];
var bar_array = [];

var colour_range_11 = [
    white,
    colour_1,
    colour_2,
    colour_3,
    colour_4,
    colour_5,
    colour_6,
    colour_7,
    colour_8,
    colour_9,
    colour_10
];

var colour_range_10 = [
    colour_1,
    colour_2,
    colour_3,
    colour_4,
    colour_5,
    colour_6,
    colour_7,
    colour_8,
    colour_9,
    colour_10
];

var bar_array_strings = [
    'recent_immigration',
    'lim_at',
    'visible_minority',
    'unemployment',
    'aboriginal_identity',
    'child_poverty',
    'tenant30'
];

var bar_array_names = [
    '#clicked_bar_recent_immigration',
    '#clicked_bar_lim_at',
    '#clicked_bar_visible_minority',
    '#clicked_bar_unemployment',
    '#clicked_bar_aboriginal_identity',
    '#clicked_bar_child_poverty',
    '#clicked_bar_tenant30'
];

var value_array_names = [
    'clicked_value_recent_immigration',
    'clicked_value_lim_at',
    'clicked_value_visible_minority',
    'clicked_value_unemployment',
    'clicked_value_aboriginal_identity',
    'clicked_value_child_poverty',
    'clicked_value_tenant30'
];

var provter_bar_array_names = [
    '#provter_bar_recent_immigration',
    '#provter_bar_lim_at',
    '#provter_bar_visible_minority',
    '#provter_bar_unemployment',
    '#provter_bar_aboriginal_identity',
    '#provter_bar_child_poverty',
    '#provter_bar_tenant30'
];

var provter_value_array_names = [
    'provter_value_recent_immigration',
    'provter_value_lim_at',
    'provter_value_visible_minority',
    'provter_value_unemployment',
    'provter_value_aboriginal_identity',
    'provter_value_child_poverty',
    'provter_value_tenant30'
];

var svg_height = $('.bars').height();
var svg_width = $('.bars').width();

// Create a scale: transform value in pixel
var x = d3.scaleLinear()
    .domain([0, 100])         // This is the min and the max of the data: 0 to 100 if percentages
    .range([0, svg_height]);       // This is the corresponding value I want in Pixels (should be the same as the height of the svg to properly scale)

var y = d3.scaleLinear()
    .domain([0, 100])         // This is the min and the max of the data: 0 to 100 if percentages
    .range([0, svg_width]);       // This is the corresponding value I want in Pixels (should be the same as the width of the svg to properly scale)

var bar_transition_duration = 1000;
var bar_fill = grey;

var create_bars = function(){
    // clicked bars
    for (var i = 0; i < bar_array_strings.length; i++) {
        var variable_string = bar_array_strings[i]; // variable attribute name as a string
        // Select the svg area based on id to place bar
        var svg_id = bar_array_names[i];
        var svg = d3.select(svg_id);

        svg.append("rect")
            .attr('class', 'fill_bar')
            .attr("x", x(4))
            .attr("y", y(0))
            .attr("rx", x(25))
            .attr("ry", y(25))
            .attr("height", x(100))
            .style("fill", bar_fill)
            .attr("width", y(0));

        svg.append("rect") // border
            .attr('class', 'border')
            .attr("x", x(0))
            .attr("y", y(0))
            .attr("rx", x(25))
            .attr("ry", y(25))
            .attr("width", y(100))
            .attr("height", x(100))
            .style("fill", "transparent")
            .style('stroke', grey);
    };
    // provter bars
    for (var i = 0; i < bar_array_strings.length; i++) {
        // Select the svg area based on id to place bar
        var svg_id = provter_bar_array_names[i];
        var svg = d3.select(svg_id);

        svg.append("rect")
            .attr('class', 'fill_bar')
            .attr("x", x(4))
            .attr("y", y(0))
            .attr("rx", x(25))
            .attr("ry", y(25))
            .attr("height", x(100))
            .style("fill", bar_fill)
            .attr("width", y(0));

        svg.append("rect") // border
            .attr('class', 'border')
            .attr("x", x(0))
            .attr("y", y(0))
            .attr("rx", x(25))
            .attr("ry", y(25))
            .attr("width", y(100))
            .attr("height", x(100))
            .style("fill", "transparent")
            .style('stroke', grey);
    };

};

create_bars();

var adjust_bars = function (bar_array, stops_recent_immigration, stops_visible_minority, stops_aboriginal_identity, stops_lim_at, stops_child_poverty, stops_unemployment, stops_tenant30) {

    for (var i = 0; i < bar_array.length; i++) {
        // define variables for use
        var variable = bar_array[i]; // variable value
        var variable_string = bar_array_strings[i]; // variable attribute name as a string
        // Select the svg area based on id to place bar
        var svg_id = bar_array_names[i];
        var svg = d3.select(svg_id);
        // matching p element ids for value to populate
        var value_id = value_array_names[i];
        var value_clicked = document.getElementById(value_id);

        // define colour scale for bars based on which variable it is
        if (variable_string === 'recent_immigration') {
            var colour_scale = d3.scaleLinear().domain(stops_recent_immigration).range(colour_range_11);
        } else if (variable_string === 'lim_at') {
            var colour_scale = d3.scaleLinear().domain(stops_lim_at).range(colour_range_10);
        } else if (variable_string === 'visible_minority') {
            var colour_scale = d3.scaleLinear().domain(stops_visible_minority).range(colour_range_11);
        } else if (variable_string === 'unemployment') {
            var colour_scale = d3.scaleLinear().domain(stops_unemployment).range(colour_range_10);
        } else if (variable_string === 'aboriginal_identity') {
            var colour_scale = d3.scaleLinear().domain(stops_aboriginal_identity).range(colour_range_10);
        } else if (variable_string === 'child_poverty') {
            var colour_scale = d3.scaleLinear().domain(stops_child_poverty).range(colour_range_10);
        } else if (variable_string === 'tenant30') {
            var colour_scale = d3.scaleLinear().domain(stops_tenant30).range(colour_range_10);
        };


        if (variable != "") {
            // populate clicked value fields
            value_clicked.innerHTML = variable + "%";

            // determine colour based on predefined colour scale
            bar_fill = colour_scale(variable);

            svg.select("rect.fill_bar")
                .transition()
                .duration(bar_transition_duration) //time in ms
                .style("fill", bar_fill)
                .attr("width", y(variable));

        } else {
            // populate clicked value fields
            value_clicked.innerHTML = "N/A";
            // create bar from variable that is null
            svg.select("rect.fill_bar")
                .transition()
                .duration(bar_transition_duration) //time in ms
                .style("fill", grey)
                .attr("width", y(100));
        };
    };

};

var provter_adjust_bars = function (provter_bar_array, stops_recent_immigration, stops_visible_minority, stops_aboriginal_identity, stops_lim_at, stops_child_poverty, stops_unemployment, stops_tenant30) {
    console.log("provter_adjust_bars called");

    for (var i = 0; i < provter_bar_array.length; i++) {
        // define variables for use
        var variable = provter_bar_array[i]; // variable value
        var variable_string = bar_array_strings[i]; // variable attribute name as a string
        // Select the svg area based on id to place bar
        var svg_id = provter_bar_array_names[i];
        var svg = d3.select(svg_id);
        // matching p element ids for value to populate
        var value_id = provter_value_array_names[i];
        var value_clicked = document.getElementById(value_id);

        // define colour scale for bars based on which variable it is
        if (variable_string === 'recent_immigration') {
            var colour_scale = d3.scaleLinear().domain(stops_recent_immigration).range(colour_range_11);
        } else if (variable_string === 'lim_at') {
            var colour_scale = d3.scaleLinear().domain(stops_lim_at).range(colour_range_10);
        } else if (variable_string === 'visible_minority') {
            var colour_scale = d3.scaleLinear().domain(stops_visible_minority).range(colour_range_11);
        } else if (variable_string === 'unemployment') {
            var colour_scale = d3.scaleLinear().domain(stops_unemployment).range(colour_range_10);
        } else if (variable_string === 'aboriginal_identity') {
            var colour_scale = d3.scaleLinear().domain(stops_aboriginal_identity).range(colour_range_10);
        } else if (variable_string === 'child_poverty') {
            var colour_scale = d3.scaleLinear().domain(stops_child_poverty).range(colour_range_10);
        } else if (variable_string === 'tenant30') {
            var colour_scale = d3.scaleLinear().domain(stops_tenant30).range(colour_range_10);
        };


        if (variable != "") {
            // populate clicked value fields
            value_clicked.innerHTML = variable + "%";

            // determine colour based on predefined colour scale
            bar_fill = colour_scale(variable);

            svg.select("rect.fill_bar")
                .transition()
                .duration(bar_transition_duration) //time in ms
                .style("fill", bar_fill)
                .attr("width", y(variable));

        } else {
            // populate clicked value fields
            value_clicked.innerHTML = "N/A";
            // create bar from variable that is null
            svg.select("rect.fill_bar")
                .transition()
                .duration(bar_transition_duration) //time in ms
                .style("fill", grey)
                .attr("width", y(100));

        };
    };

};
